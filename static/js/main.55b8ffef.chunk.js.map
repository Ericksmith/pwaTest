{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","takePhoto","strip","current","data","canvas","toDataURL","link","document","createElement","href","console","log","setAttribute","innerHTML","concat","insertBefore","firstChild","video","React","createRef","state","navigator","mediaDevices","getUserMedia","audio","then","localMediaStream","src","window","URL","createObjectURL","play","catch","err","error","width","videoWidth","height","videoHeight","react_default","a","className","class","ref","onClick","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","getElementById","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.55b8ffef.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.video = React.createRef();\n    this.canvas = React.createRef();\n    this.strip = React.createRef();\n    this.state = {\n    };\n  }\n\n  componentDidMount() {\n    const video = this.video.current\n    const canvas = this.canvas.current\n    // const ctx = canvas.getContext('2d');\n    navigator.mediaDevices.getUserMedia({ video: true, audio: false })\n    .then(localMediaStream => {\n      console.log(localMediaStream);\n      video.src = window.URL.createObjectURL(localMediaStream);\n      video.play();\n    })\n    .catch(err => {\n      console.error(`OH NO!!!`, err);\n    });\n    const width = video.videoWidth;\n    const height = video.videoHeight;\n    canvas.width = width;\n    canvas.height = height;\n    console.log(width, height);\n  \n    // return setInterval(() => {\n    //   ctx.drawImage(video, 0, 0, width, height);\n    // }, 16)\n  }\n\n  takePhoto = () => {\n    const strip = this.strip.current\n    const canvas = this.canvas.current\n    const data = canvas.toDataURL('image/jpeg');\n    const link = document.createElement('a');\n    link.href = data;\n    console.log(data);\n    link.setAttribute('download', 'handsome');\n    link.innerHTML = `<img src=\"${data}\" alt=\"Handsome Man\" />`\n    strip.insertBefore(link, strip.firstChild);\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <video class=\"player\" ref={this.video} />\n          <button onClick={this.takePhoto}>Take Photo</button>\n          <canvas class=\"photo\" ref={this.canvas}></canvas>\n          <div class=\"strip\" ref={this.strip}></div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}